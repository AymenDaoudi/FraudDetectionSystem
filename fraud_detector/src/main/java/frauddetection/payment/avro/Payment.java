/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package frauddetection.payment.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Payment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5923695669196482281L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Payment\",\"namespace\":\"frauddetection.payment.avro\",\"fields\":[{\"name\":\"transaction_id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"user_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"date\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"nb_of_items\",\"type\":\"int\"},{\"name\":\"total_amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Payment> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Payment> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Payment> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Payment> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Payment> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Payment to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Payment from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Payment instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Payment fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID transaction_id;
  private java.lang.String user_id;
  private java.time.Instant date;
  private int nb_of_items;
  private java.math.BigDecimal total_amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Payment() {}

  /**
   * All-args constructor.
   * @param transaction_id The new value for transaction_id
   * @param user_id The new value for user_id
   * @param date The new value for date
   * @param nb_of_items The new value for nb_of_items
   * @param total_amount The new value for total_amount
   */
  public Payment(java.util.UUID transaction_id, java.lang.String user_id, java.time.Instant date, java.lang.Integer nb_of_items, java.math.BigDecimal total_amount) {
    this.transaction_id = transaction_id;
    this.user_id = user_id;
    this.date = date.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.nb_of_items = nb_of_items;
    this.total_amount = total_amount;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transaction_id;
    case 1: return user_id;
    case 2: return date;
    case 3: return nb_of_items;
    case 4: return total_amount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transaction_id = (java.util.UUID)value$; break;
    case 1: user_id = value$ != null ? value$.toString() : null; break;
    case 2: date = (java.time.Instant)value$; break;
    case 3: nb_of_items = (java.lang.Integer)value$; break;
    case 4: total_amount = (java.math.BigDecimal)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'transaction_id' field.
   * @return The value of the 'transaction_id' field.
   */
  public java.util.UUID getTransactionId() {
    return transaction_id;
  }


  /**
   * Sets the value of the 'transaction_id' field.
   * @param value the value to set.
   */
  public void setTransactionId(java.util.UUID value) {
    this.transaction_id = value;
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return The value of the 'user_id' field.
   */
  public java.lang.String getUserId() {
    return user_id;
  }


  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.time.Instant getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.time.Instant value) {
    this.date = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'nb_of_items' field.
   * @return The value of the 'nb_of_items' field.
   */
  public int getNbOfItems() {
    return nb_of_items;
  }


  /**
   * Sets the value of the 'nb_of_items' field.
   * @param value the value to set.
   */
  public void setNbOfItems(int value) {
    this.nb_of_items = value;
  }

  /**
   * Gets the value of the 'total_amount' field.
   * @return The value of the 'total_amount' field.
   */
  public java.math.BigDecimal getTotalAmount() {
    return total_amount;
  }


  /**
   * Sets the value of the 'total_amount' field.
   * @param value the value to set.
   */
  public void setTotalAmount(java.math.BigDecimal value) {
    this.total_amount = value;
  }

  /**
   * Creates a new Payment RecordBuilder.
   * @return A new Payment RecordBuilder
   */
  public static frauddetection.payment.avro.Payment.Builder newBuilder() {
    return new frauddetection.payment.avro.Payment.Builder();
  }

  /**
   * Creates a new Payment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Payment RecordBuilder
   */
  public static frauddetection.payment.avro.Payment.Builder newBuilder(frauddetection.payment.avro.Payment.Builder other) {
    if (other == null) {
      return new frauddetection.payment.avro.Payment.Builder();
    } else {
      return new frauddetection.payment.avro.Payment.Builder(other);
    }
  }

  /**
   * Creates a new Payment RecordBuilder by copying an existing Payment instance.
   * @param other The existing instance to copy.
   * @return A new Payment RecordBuilder
   */
  public static frauddetection.payment.avro.Payment.Builder newBuilder(frauddetection.payment.avro.Payment other) {
    if (other == null) {
      return new frauddetection.payment.avro.Payment.Builder();
    } else {
      return new frauddetection.payment.avro.Payment.Builder(other);
    }
  }

  /**
   * RecordBuilder for Payment instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Payment>
    implements org.apache.avro.data.RecordBuilder<Payment> {

    private java.util.UUID transaction_id;
    private java.lang.String user_id;
    private java.time.Instant date;
    private int nb_of_items;
    private java.math.BigDecimal total_amount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(frauddetection.payment.avro.Payment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transaction_id)) {
        this.transaction_id = data().deepCopy(fields()[0].schema(), other.transaction_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.user_id)) {
        this.user_id = data().deepCopy(fields()[1].schema(), other.user_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.nb_of_items)) {
        this.nb_of_items = data().deepCopy(fields()[3].schema(), other.nb_of_items);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.total_amount)) {
        this.total_amount = data().deepCopy(fields()[4].schema(), other.total_amount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Payment instance
     * @param other The existing instance to copy.
     */
    private Builder(frauddetection.payment.avro.Payment other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.transaction_id)) {
        this.transaction_id = data().deepCopy(fields()[0].schema(), other.transaction_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user_id)) {
        this.user_id = data().deepCopy(fields()[1].schema(), other.user_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nb_of_items)) {
        this.nb_of_items = data().deepCopy(fields()[3].schema(), other.nb_of_items);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.total_amount)) {
        this.total_amount = data().deepCopy(fields()[4].schema(), other.total_amount);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'transaction_id' field.
      * @return The value.
      */
    public java.util.UUID getTransactionId() {
      return transaction_id;
    }


    /**
      * Sets the value of the 'transaction_id' field.
      * @param value The value of 'transaction_id'.
      * @return This builder.
      */
    public frauddetection.payment.avro.Payment.Builder setTransactionId(java.util.UUID value) {
      validate(fields()[0], value);
      this.transaction_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_id' field has been set.
      * @return True if the 'transaction_id' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transaction_id' field.
      * @return This builder.
      */
    public frauddetection.payment.avro.Payment.Builder clearTransactionId() {
      transaction_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_id' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return user_id;
    }


    /**
      * Sets the value of the 'user_id' field.
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public frauddetection.payment.avro.Payment.Builder setUserId(java.lang.String value) {
      validate(fields()[1], value);
      this.user_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'user_id' field.
      * @return This builder.
      */
    public frauddetection.payment.avro.Payment.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.time.Instant getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public frauddetection.payment.avro.Payment.Builder setDate(java.time.Instant value) {
      validate(fields()[2], value);
      this.date = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public frauddetection.payment.avro.Payment.Builder clearDate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'nb_of_items' field.
      * @return The value.
      */
    public int getNbOfItems() {
      return nb_of_items;
    }


    /**
      * Sets the value of the 'nb_of_items' field.
      * @param value The value of 'nb_of_items'.
      * @return This builder.
      */
    public frauddetection.payment.avro.Payment.Builder setNbOfItems(int value) {
      validate(fields()[3], value);
      this.nb_of_items = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'nb_of_items' field has been set.
      * @return True if the 'nb_of_items' field has been set, false otherwise.
      */
    public boolean hasNbOfItems() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'nb_of_items' field.
      * @return This builder.
      */
    public frauddetection.payment.avro.Payment.Builder clearNbOfItems() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'total_amount' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalAmount() {
      return total_amount;
    }


    /**
      * Sets the value of the 'total_amount' field.
      * @param value The value of 'total_amount'.
      * @return This builder.
      */
    public frauddetection.payment.avro.Payment.Builder setTotalAmount(java.math.BigDecimal value) {
      validate(fields()[4], value);
      this.total_amount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'total_amount' field has been set.
      * @return True if the 'total_amount' field has been set, false otherwise.
      */
    public boolean hasTotalAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'total_amount' field.
      * @return This builder.
      */
    public frauddetection.payment.avro.Payment.Builder clearTotalAmount() {
      total_amount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Payment build() {
      try {
        Payment record = new Payment();
        record.transaction_id = fieldSetFlags()[0] ? this.transaction_id : (java.util.UUID) defaultValue(fields()[0]);
        record.user_id = fieldSetFlags()[1] ? this.user_id : (java.lang.String) defaultValue(fields()[1]);
        record.date = fieldSetFlags()[2] ? this.date : (java.time.Instant) defaultValue(fields()[2]);
        record.nb_of_items = fieldSetFlags()[3] ? this.nb_of_items : (java.lang.Integer) defaultValue(fields()[3]);
        record.total_amount = fieldSetFlags()[4] ? this.total_amount : (java.math.BigDecimal) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Payment>
    WRITER$ = (org.apache.avro.io.DatumWriter<Payment>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Payment>
    READER$ = (org.apache.avro.io.DatumReader<Payment>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










